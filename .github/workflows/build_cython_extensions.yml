name: Build Cython Extensions

on:
  schedule:
    - cron: '0 2 * * *' # run at 2 AM UTC

jobs:
  build_wheels:
    name: Build wheel for cp${{ matrix.python }}-${{ matrix.platform_id }}-${{ matrix.manylinux_image }}
    runs-on: ${{ matrix.os }}

    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        include:
          # Window 64 bit
          # Note: windows-2019 is needed for older Python versions:
          # https://github.com/scikit-learn/scikit-learn/issues/22530
          - os: windows-2019
            python: 38
            platform_id: win_amd64
          - os: windows-latest
            python: 39
            platform_id: win_amd64
          - os: windows-latest
            python: 310
            platform_id: win_amd64
          - os: windows-latest
            python: 311
            platform_id: win_amd64

          # Linux 64 bit manylinux2014
          - os: ubuntu-latest
            python: 38
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2014
          - os: ubuntu-latest
            python: 39
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2014

          # NumPy on Python 3.10 only supports 64bit and is only available with manylinux2014
          - os: ubuntu-latest
            python: 310
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2014

          - os: ubuntu-latest
            python: 311
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2014

          # MacOS x86_64
          - os: macos-latest
            python: 38
            platform_id: macosx_x86_64
          - os: macos-latest
            python: 39
            platform_id: macosx_x86_64
          - os: macos-latest
            python: 310
            platform_id: macosx_x86_64
          - os: macos-latest
            python: 311
            platform_id: macosx_x86_64

          # MacOS arm64
          - os: macos-latest
            python: 38
            platform_id: macosx_arm64
          - os: macos-latest
            python: 39
            platform_id: macosx_arm64
          - os: macos-latest
            python: 310
            platform_id: macosx_arm64
          - os: macos-latest
            python: 311
            platform_id: macosx_arm64

    steps:
      - 
        name: Checkout nanopyx
        uses: actions/checkout@v3

      - 
        name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  # update once build dependencies are available
          cache: 'pip' # cache pips to accelerate builds
          cache-dependency-path: '.github/requirements.txt'

      - 
        name: Install cibuildwheel
        run: python -m pip install cibuildwheel>=2.11.4

      - 
        name: Install other dependencies
        run: python -m pip install -r .github/requirements.txt

      - 
        name: Build and test wheels
        env:
          #CIBW_ENVIRONMENT: OMP_NUM_THREADS=2
          #                  OPENBLAS_NUM_THREADS=2
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          CIBW_BUILD_VERBOSITY: 1
          CIBW_ARCHS: all
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux_image }}

          # Run the package tests using `pytest`
          #CIBW_TEST_COMMAND: pytest # {package}/tests
          #CIBW_TEST_REQUIRES: pytest threadpoolctl
          #CIBW_TEST_COMMAND_MACOS: pytest {package}/tests
          #CIBW_TEST_COMMAND_WINDOWS: pytest {package}\tests
          
        run: python -m cibuildwheel --output-dir wheelhouse

      - 
        name: Store artifacts
        uses: actions/upload-artifact@v3
        with:
          path: wheelhouse/*.whl
