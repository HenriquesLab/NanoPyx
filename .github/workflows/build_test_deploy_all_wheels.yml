name: (self-hosted) Build and Publish Wheels

on: workflow_dispatch

jobs:
  build:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: macOS-ARM
            runner: [self-hosted, macOS, ARM64]
            archs: arm64
            cibw_build: cp39-macosx_arm64 cp310-macosx_arm64 cp311-macosx_arm64 cp312-macosx_arm64
          - os: manylinux
            runner: [self-hosted, Ubuntu, Native]
            archs: auto
            cibw_build: cp39-manylinux_x86_64 cp310-manylinux_x86_64 cp311-manylinux_x86_64 cp312-manylinux_x86_64
            CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          - os: windows
            runner: [self-hosted, Windows]
            archs: auto
            cibw_build: cp39-win_amd64 cp310-win_amd64 cp311-win_amd64 cp312-win_amd64

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: 3.9  # Works as bootstrap for cibuildwheel

      - name: Install libjpeg-dev
        if: matrix.os == 'manylinux'
        run: sudo apt-get update && sudo apt-get install -y libjpeg-dev

      - name: Install cibuildwheel and nox
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel==2.16.2
          python -m pip install nox

      - name: Build sdist (only on Windows)
        if: matrix.os == 'windows'
        run: python -m nox --sessions build_sdist

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_ARCHS: ${{ matrix.archs }}
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.os == 'manylinux' && 'manylinux_2_28' || '' }}
          CIBW_BEFORE_ALL: ${{ matrix.os == 'manylinux' && 'dnf install -y libjpeg-devel zlib-devel libpng-devel' || '' }}

      - name: Test wheels (only on macOS ARM64)
        if: matrix.os == 'macOS-ARM'
        run: python -m nox --sessions test_wheel

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*

  publish:
    name: Publish to PyPI
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Combine all wheels and sdists
        run: |
          mkdir -p final_dist
          find dist -name "*.whl" -exec cp {} final_dist/ \;
          find dist -name "*.tar.gz" -exec cp {} final_dist/ \;

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.BMS_DEPLOY_PYPI_TOKEN }}
          packages-dir: ./final_dist/