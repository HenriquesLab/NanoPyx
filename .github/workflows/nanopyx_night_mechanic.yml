name: test-nightly
# does a massive check, every night

on:
  schedule:
    - cron: "0 23 * * *"

  # creates a button
  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        default: "warning"
        type: choice
        options:
          - info
          - warning
          - debug

jobs:
  build_wheels:
    runs-on: [self-hosted, deepthought]
    steps:
      - name: Setup Ubuntu dependencies
        run: |
          DEBIAN_FRONTEND=noninteractive apt-get -y install tzdata
          apt install -y curl systemctl build-essential lsb-release python3-pip git libgl1-mesa-glx libglib2.0-0 ca-certificates jq htop gource ffmpeg xvfb python3.10-venv libavcodec-extra python3.11-full python3.10-full libpython3.10-dev libpython3.11-dev
          python3 -m pip install --upgrade pipx
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Python's for Nox
        uses: wntrblm/nox@2022.11.21
        with:
          python-versions: "3.8, 3.9, 3.10, 3.11"
      - name: Run Nox - build_wheel build_sdist
        run: |
          pipx run nox --sessions build_wheel build_sdist
        env:
          LOG_LEVEL: ${{ github.event.inputs.logLevel }}
      - name: Save wheels to cache
        id: cache-wheels-save
        uses: actions/cache@v3
        with:
          path: wheelhouse
          key: ${{ runner.os }}-wheelhouse
          restore-keys: |
            ${{ runner.os }}-wheelhouse
      - name: Archive Wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheelhouse
          path: wheelhouse/*.whl
          retention-days: 15

  test_wheels:
    needs: build_wheels
    runs-on: [self-hosted, deepthought]
    steps:
      - name: Setup Ubuntu dependencies
        run: |
          DEBIAN_FRONTEND=noninteractive apt-get -y install tzdata
          apt install -y curl systemctl build-essential lsb-release python3-pip git libgl1-mesa-glx libglib2.0-0 ca-certificates jq htop gource ffmpeg xvfb python3.10-venv libavcodec-extra python3.11-full python3.10-full libpython3.10-dev libpython3.11-dev
          python3 -m pip install --upgrade pipx
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Restore cached wheels
        id: cache-wheels-restore
        uses: actions/cache/restore@v3
        with:
          path: wheelhouse
          key: ${{ runner.os }}-wheelhouse
          restore-keys: |
            ${{ runner.os }}-wheelhouse
      - name: Install Python's for Nox
        uses: wntrblm/nox@2022.11.21
        with:
          python-versions: "3.8, 3.9, 3.10, 3.11"
      - name: Run Nox - tests_on_wheels
        run: |
          pipx run nox --sessions tests_on_wheels
        env:
          LOG_LEVEL: ${{ github.event.inputs.logLevel }}

  build_doc:
    runs-on: [self-hosted, linux]
    steps:
      - name: Setup Ubuntu dependencies
        run: |
          DEBIAN_FRONTEND=noninteractive apt-get -y install tzdata
          apt install -y curl systemctl build-essential lsb-release python3-pip git libgl1-mesa-glx libglib2.0-0 ca-certificates jq htop gource ffmpeg xvfb python3.10-venv libavcodec-extra python3.11-full python3.10-full
          python3 -m pip install --upgrade pipx
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Run Nox - generate_docs
        run: |
          pipx run nox --sessions generate_docs
      - uses: actions/upload-pages-artifact@v1
        with:
          path: docs/

  deploy_doc:
    needs: build_doc
    # only run if main branch
    if: github.ref == 'refs/heads/main'
    runs-on: [self-hosted, linux]
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v2

  generate_movie:
    runs-on: [self-hosted, linux]
    steps:
      - name: Setup Ubuntu dependencies
        run: |
          DEBIAN_FRONTEND=noninteractive apt-get -y install tzdata
          apt install -y curl systemctl build-essential lsb-release python3-pip git libgl1-mesa-glx libglib2.0-0 ca-certificates jq htop gource ffmpeg xvfb python3.10-venv libavcodec-extra python3.11-full python3.10-full
          python3 -m pip install --upgrade pipx
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Generate movie
        run: |
          xvfb-run gource --output-custom-log repo-activity.log
          python3 -c "txt=open('repo-activity.log').read();txt=txt.replace('Bruno Manuel Santos Saraiva', 'Bruno Saraiva').replace('inesmcunha', 'Inês Cunha').replace('antmsbrito', 'António Brito');open('repo-activity.log', 'w').write(txt)"
          xvfb-run gource --highlight-dirs --highlight-users repo-activity.log -1280x720 --max-user-speed 100 --seconds-per-day 0.1 --auto-skip-seconds 1 -o - | ffmpeg -y -r 60 -f image2pipe -vcodec ppm -i - -pix_fmt yuv420p gource.mp4
      - name: Archive generated movie
        uses: actions/upload-artifact@v3
        with:
          name: gource-movie
          path: gource.mp4
          retention-days: 3

  cleanup_cache:
    needs: [build_wheels, test_wheels]
    runs-on: [self-hosted, linux]
    steps:
      - name: Cleanup
        run: |
          gh extension install actions/gh-actions-cache

          REPO=${{ github.repository }}
          BRANCH="refs/pull/${{ github.event.pull_request.number }}/merge"

          echo "Fetching list of cache key"
          cacheKeysForPR=$(gh actions-cache list -R $REPO -B $BRANCH | cut -f 1 )

          ## Setting this to not fail the workflow while deleting cache keys.
          set +e
          echo "Deleting caches..."
          for cacheKey in $cacheKeysForPR
          do
              gh actions-cache delete $cacheKey -R $REPO -B $BRANCH --confirm
          done
          echo "Done"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
