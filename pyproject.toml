[build-system]
requires = [
    "setuptools>=42",
    "wheel>=0.38.4",
    "cython>=0.29.0",
    "numpy>=1.19.0",
]
build-backend = "setuptools.build_meta"

[project]
# For an example see REF: https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
name = "nanopyx"
version = "0.0.1"
description = "Nanoscopy Python library (NanoPyx, the successor to NanoJ) - focused on light microscopy and super-resolution imaging"
readme = "README.md"
requires-python = ">=3.8"
license = { file = "LICENSE.txt" }
keywords = [
    "NanoJ",
    "Super-Resolution Microscopy",
    "Fluorescence",
    "BioImage Analysis",
]
authors = [
    { name = "Ricardo Henriques", email = "ricardo.jv.henriques@gmail.com" },
    { name = "Bruno Saraiva", email = "bruno.msaraiva2@gmail.com" },
    { name = "Inês Cunha", email = "inescunha200@gmail.com" },
    { name = "António Brito", email = "antmsbrito95@gmail.com" },
]
maintainers = [{ name = "Bruno Saraiva", email = "bruno.msaraiva2@gmail.com" }]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
    "cython>=0.29.32",
    "numpy>=1.22",
    "scipy>=1.8",
    "tifffile>=2022.5.4",
    "scikit-image>=0.19.2",
    "noise>=1.2.2",
    "opensimplex>=0.4.4",
    "pyyaml>=6.0",
    "wget>=3.2",
    "onedrivedownloader>=1.1.3",
    "gdown>=4.6.0",
    "tqdm>=4.64.1",
    "lmfit>=1.1.0",
    "opencv-python>=4.7.0.68",
    "mastodon.py>=1.8.0",
]

[project.optional-dependencies]
all = ["nanopyx[developer,test,jupyter,doc]"]
developer = [
    "build>=0.10.0",
    "wheel>=0.38.4",
    "delocate>=0.10.4",
    "auditwheel>=5.3.0",
    "pyx2pxd>=0.1.1",
    "black>=23.1.0",
    "flake8>=6.0.0",
]
test = [
    "pytest>=7.1",
    "pytest-cov>= 4.0.0",
    "pytest-emoji>=0.2.0",
    "pytest-icdiff>=0.6",         # https://github.com/hjwp/pytest-icdiff
    "pytest-clarity>=1.0.1",      # https://pypi.org/project/pytest-clarity/
    "pytest-timeout>=2.1.0",
    "pytest-plt>=1.1.0",
    "pytest-xdist>=3.1.0",
    "pytest-sugar>=0.9.6",
    "pytest-cython>=0.2.0",
    "nanopyx[jupyter,developer]",
]
jupyter = [
    "nbformat>=4.2.0",
    "matplotlib>=3.5",
    "seaborn>=0.12.1",
    "stackview>=0.5.1",
    # "plotly>=5.11.0",
    "celluloid>=0.2.0",  # https://towardsdatascience.com/the-simplest-way-of-making-gifs-and-math-videos-with-python-aec41da74c6e
    "jupyterlab>=3.5.3",
    "nbmake>=1.3.5",
]
doc = ["pdoc>=12.3.1", "nanopyx[jupyter,developer]"]

[project.urls]
homepage = "https://github.com/HenriquesLab/NanoPyx"
documentation = "https://henriqueslab.github.io/nanopyx"
repository = "https://github.com/HenriquesLab/NanoPyx"
#changelog = "https://github.com/me/spam/blob/master/CHANGELOG.md"
bug_tracker = "https://github.com/HenriquesLab/NanoPyx/issues"

[tool.black]
exclude = '''
/(
    \.eggs
  | \.git
  | \.venv
  | build
  | dist
)/
'''

[tool.pyright]
reportUndefinedVariable = false
reportMissingImports = false

[tool.pytest.ini_options]
addopts = "--emoji --cov=nanopyx -n=auto --plots --doctest-modules --doctest-cython --ignore-glob=run*Tools.py --ignore=setup.py --ignore=notebooks/"
timeout = 600
plt_dirname = "tests_plots"
doctest_encoding = "latin1"
# Filters are standard python warning filters as described here:
# https://docs.python.org/3/library/warnings.html#the-warnings-filter
filterwarnings = [
    "ignore:.*distutils.*:DeprecationWarning:.*",
    "ignore:.*distutils.*:UserWarning:.*",
    "ignore:.*The 'u' format is deprecated.*:DeprecationWarning:pywintypes",
    "ignore:.*Deprecated NumPy.*:DeprecationWarning:.*",
]
testpaths = ["tests", "src"]

[tool.flake8]
# https://pypi.org/project/Flake8-pyproject/
# https://flake8.pycqa.org/en/latest/user/configuration.html
filename = [".py", "*.pyx", "*.px*"]
exclude = [".eggs", "*.egg,build"]
ignore = ["E901", "E225", "E226", "E227", "W503"]
max-line-length = 120


[tool.cibuildwheel]
# https://cibuildwheel.readthedocs.io/en/stable/options/
skip = ["pp*", "*musllinux*"]
build = ["cp38-*", "cp39-*", "cp310-*", "cp311-*"]
test-skip = ""                                     # "*-macosx_arm64"

archs = ["auto"]
build-frontend = "pip"
config-settings = {}
dependency-versions = "pinned"
environment = {}
environment-pass = []
build-verbosity = ""

before-all = ""
before-build = ""
repair-wheel-command = ""

test-command = "pytest -n=0 {project}/tests"
before-test = ""
test-requires = ["nanopyx[test]"]
test-extras = []

container-engine = "docker"

manylinux-x86_64-image = "manylinux2014"
manylinux-i686-image = "manylinux2014"
manylinux-aarch64-image = "manylinux2014"
# manylinux-ppc64le-image = "manylinux2014"
# manylinux-s390x-image = "manylinux2014"
# manylinux-pypy_x86_64-image = "manylinux2014"
# manylinux-pypy_i686-image = "manylinux2014"
# manylinux-pypy_aarch64-image = "manylinux2014"

# musllinux-x86_64-image = "musllinux_1_1"
# musllinux-i686-image = "musllinux_1_1"
# musllinux-aarch64-image = "musllinux_1_1"
# musllinux-ppc64le-image = "musllinux_1_1"
# musllinux-s390x-image = "musllinux_1_1"


[tool.cibuildwheel.linux]
before-all = "yum install opencv opencv-devel opencv-python"
repair-wheel-command = "auditwheel repair -w {dest_dir} {wheel}"

[tool.cibuildwheel.macos]
archs = ["universal2"]
before-all = ["brew install gcc llvm libomp"]
#repair-wheel-command = "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"
repair-wheel-command = "delocate-wheel -w {dest_dir} -v {wheel}"

[tool.cibuildwheel.macos.environment]
CMAKE_OSX_ARCHITECTURES = "arm64;x86_64"
#MACOSX_DEPLOYMENT_TARGET = "11"
#LDFLAGS="-L/usr/local/lib"
#CXX="/usr/local/opt/llvm/bin/clang++"
#CC="/usr/local/opt/llvm/bin/clang"

[tool.cibuildwheel.windows]
test-command = "pytest -n=0 {project}\\tests"
before-build = "pip install delvewheel"
repair-wheel-command = "delvewheel repair -w {dest_dir} {wheel}"

[tool.cibuildwheel.windows.environment]
SETUPTOOLS_USE_DISTUTILS = "stdlib"
